DB lab2 model design

Capability requirements (Schemas must match)
1. track all people in the company, complete with their positions and the teams they belong to.
2. keep track of all the people that belong to business partners, complete with whom they represent and their positions
3. keep track of available resources in terms of meeting rooms, facilities of such, and time when they are booked
4. Meetings must also be tracked, with booked rooms, participants and time slots
5. Costs for booking rooms vary with facilities and time allocated and must be booked against the team that the person booking the room belongs to
6. A log of costs accrued by the various teams must be kept.
7. keep track of booked rooms and times and reject any booking attempts that would result in overlaps

---------------------------------------------------------------

Proposed schema

user(personId int;not null;unique;PrimaryKey,name text;not null, password text;not null,position text;not null,teamId int;not null)

team(teamId int;not null;unique;PrimaryKey,teamName text;not null)

businesspartner(personId int;not null;unique;PrimaryKey, name text;not null, representing text;not null, position text;not null)

room(roomId int;not null;unique;PrimaryKey ,roomName text;not null,description text;not null,cost int;not null)

meeting(meetingId int;not null;unique;PrimaryKey, roomId int;not null, starttime text(ISO8601); not null, endtime text(ISO8601); not null,teamId int;not null,bookersPersonId int;not null,cost int;not null) - teamId is the team of the booker

participants(meetingId int;not null, personId int;not null)


notes:
SQLite does not have a storage class set aside for storing dates and/or times. Instead, the built-in Date And Time Functions of SQLite are capable of storing dates and times as TEXT, REAL, or INTEGER values:

TEXT as ISO8601 strings ("YYYY-MM-DD HH:MM:SS.SSS"). <-- lets use this
REAL as Julian day numbers, the number of days since noon in Greenwich on November 24, 4714 B.C. according to the proleptic Gregorian calendar.
INTEGER as Unix Time, the number of seconds since 1970-01-01 00:00:00 UTC


===============================================================

Functionality requirments (done by SQL queries)
1. Insert new users, delete old users, insert and delete teams (all this must  not  affect the log of costs already accrued).
2. Answer queries about what rooms are available for a given time slot
3. Add new meetings, but reject attempts to book meetings that would overlap with already booked ones
4. Delete meetings that have not occured yet (check current datetime?)
5. Present occupation lists for all rooms on a given date.
6. Show which users have booked which meetings.
7. Show all participants of a given meeting
8. Show cost accrued by teams for any given time interval.

GUI reruirements
1. login?
2. booking a meeting (and possibly having your attempt to do so rejected, if it turns out the meeting would overlap with one already in the system),
interface for booking must allow the user to choose between rooms, view their facilities, and select the people who are to attend a meeting, as well as start and end time the meeting to happen. All these choices must be provided through interface elements - no typing whatsoever required for the user
3. remove meetings from the system (that haven’t already been held), must offer the ability to choose which meetings to cancel and reject attempts to cancel by any user who didn’t book that particular meeting. Again, there must be no typing.

===============================================================

